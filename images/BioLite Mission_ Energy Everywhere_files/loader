(() => {
const withRetry = async (fn) => {
  const MAX_ATTEMPTS = 3;
  const wait = ms => new Promise((r) => setTimeout(r, ms));
  let attempts = 0;

  while (attempts < MAX_ATTEMPTS) {
    try {
      await fn();
      break;
    } catch (err) {
      attempts++;
      if (attempts < MAX_ATTEMPTS) {
        await wait(3000);
      } 
    }
  }
}
const insertChatWidget = () => {
  if(!document.body) throw new Error('Document not ready');
  if(document.querySelector('remark-chat-widget')) {
    console.debug("Chat Widget already present");
  } else {
    const remarkChatWidget = document.createElement('remark-chat-widget');
    document.body.appendChild(remarkChatWidget);
  }

  const chatLoaderSrc = 'https://chat-widget-q94zbl8vi-outdoorly.vercel.app/web-components/chat-widget.js';
  if (document.querySelector(`script[src="${chatLoaderSrc}"]`)) {
    console.debug("Chat Widget Script already present");
  } else {
    const chatLoader = document.createElement('script');
    chatLoader.type = 'module';
    chatLoader.src = chatLoaderSrc;
    document.head.appendChild(chatLoader);
  }
}
 const insertInlineActivator = async () => {
    const insertActivator = () => {
      if(!'' || !document.querySelector('')) throw new Error('No legacy activator found');
      const remarkInlineActivator = document.createElement('remark-inline-activator');
      remarkInlineActivator.id = 'remark-inline-activator-parent';
      remarkInlineActivator.style.width = 'calc(100% + 4px)';
      remarkInlineActivator.style.height = 'calc(54px + 24px + 32px)';
      remarkInlineActivator.style.position = 'relative';

      if (!document.getElementById('remark-inline-activator-parent')) {
        if('AFTER' === 'BEFORE') {
          document.querySelector('')?.before(remarkInlineActivator);
        } else {
          document.querySelector('')?.after(remarkInlineActivator);
        }
      }

      const loaderSrc = 'https://chat-widget-q94zbl8vi-outdoorly.vercel.app/web-components/inline-activator.js';

      if (document.querySelector(`script[src="${loaderSrc}"]`)) {
        console.debug("Legacy Inline Activator Script already present");
      } else {
        const inlineActivatorScript = document.createElement('script');
        inlineActivatorScript.type = 'module';
        inlineActivatorScript.src = loaderSrc;
        document.head.appendChild(inlineActivatorScript);
      }
    }

    const insertQAActivator = async () => {
      if(!document.querySelector('remark-qa-activator')) throw new Error('QA Activator not present');
      const qaActivators = document.getElementsByTagName('remark-qa-activator');

      for (let activator of qaActivators) {
        activator.setAttribute('vendor-id', '1345f64b-f11d-4eae-97bc-0baea812b269');
      }

      
        try {
          const isShopifyProduct = window.Shopify && window.location.pathname.includes('/products')
          if (isShopifyProduct) { 
            const getExternalId = async (fetchUrl) => {
              if (window?.ShopifyAnalytics?.meta?.product?.id) {
                return window.ShopifyAnalytics.meta.product.id;
              } else {
                const id = await fetch(fetchUrl, {
                  method: 'GET',
                  headers: { 'content-type': 'application/json' }
                })
                .then((resp) => resp.json())
                .then((data) => data?.product?.id);
                return id;
              }
            };
            const productSlug = '/products' + window.location.pathname.split('/products')[1] + '.json';
            const externalId = await getExternalId('https://biolite-2.myshopify.com' + productSlug);
            
            for (let activator of qaActivators) {
              activator.setAttribute('external-id', externalId);
            }
          };
          const productSlug = '/products' + window.location.pathname.split('/products')[1] + '.json';
          const externalId = await getExternalId('biolite-2.myshopify.com' + productSlug);

          for (let activator of qaActivators) {
            activator.setAttribute('external-id', externalId);
          }
        } catch (err) {
          console.warn("Failed to fetch product ID for current page.")
        }
      

      if (!document.getElementById('remark-brand-theme-styles')) {
        const themeStyles = document.createElement('style');
        themeStyles.id = 'remark-brand-theme-styles';
        themeStyles.innerHTML = `@layer remark-defaults {
          remark-qa-activator {
             
          }
        }`;
        document.head.appendChild(themeStyles);
      } else {
        console.debug("Theme Styles already present");
      }

      const loaderSrc = 'https://chat-widget-q94zbl8vi-outdoorly.vercel.app/web-components/qa-activator.js' 

      if (document.querySelector(`script[src="${loaderSrc}"]`)) {
        console.debug("QA Activator Script already present");
      } else {
        const qaActivatorScript = document.createElement('script');
        qaActivatorScript.type = 'module';
        qaActivatorScript.src = loaderSrc;
        document.head.appendChild(qaActivatorScript);  
      }
    }
    withRetry(insertActivator);
    withRetry(insertQAActivator);
  }

  withRetry(insertChatWidget);
  const params = new URLSearchParams(window.location.search);
  const shouldShowPreview = params.get('remark_preview_inline_elements');
  if(shouldShowPreview) {
    insertInlineActivator();
  }

})();
(function(){const e=()=>{if(typeof window.remark==="function"){return}const e=window.remark??{};const n=[];let t=false;const s=(n,...t)=>{const s=e[n];if(Array.isArray(s)){s.forEach((e=>e(...t)))}else if(typeof s==="function"){s(...t)}};const o=(n,t)=>{if(Array.isArray(e[n])){e[n].push(t)}else if(n in e){e[n]=[e[n],t]}else{e[n]=t}};const i=(n,t)=>{const s=e[n];if(!s){return}if(Array.isArray(s)){const o=s.findIndex((e=>e==t));e[n].splice(o,1)}else{if(s==t)delete e[n]}};const c=()=>{Object.keys((n=>{delete e[n]}))};const r=()=>{let e;while(e=n.shift()){s(...e)}};const f=(...e)=>{if(!t){n.push(e)}else{s(...e)}};const l=()=>{n.unshift(["connect"]);r();t=true};window.remark=Object.assign(f,{on:o,off:i,offAll:c,connect:l})};e()})();
console.log(
  "%cBioLite 🤝 Remark",
  'color: #ffffff; background-color: #f07357; padding: 8px; border-radius: 8px; font-family: Inter, sans-serif; border: 1px solid #303030; margin: 5px; font-weight: 500;'
);
console.log(
  '%cLearn more at www.withremark.com',
  'font-weight: bold;'
);
(() => {
const enhanceSEOPage = () => {

  const activatorButtons = document.querySelectorAll(`[data-remark-id="chat-activator"]`);
  activatorButtons.forEach((button) => {
    button.onclick = function () {
      if (window && window.remark) window.remark('open', { from: 'seo-activator-button', message: button.getAttribute('data-remark-activator-text'), productName: button.getAttribute('data-remark-product-name') });
    };
  });
  const PRODUCT_PRICE_QUERY = `
  query ProductPriceById($id: ID!) {
    product(id: $id) {
      id
      price(currency: USD) {
        id
        currency
        price
      }
      externalUrl
    }
  }
`;
  const prices = document.querySelectorAll(`[data-remark-id="product-price"]`);
  prices.forEach(async (priceElement) => {
    const id = priceElement.getAttribute("remark-product-id");
    await fetch('https://api.withremark.com/graphql', {
      method: 'POST',
      headers: { 'content-type': 'application/json' },
      body: JSON.stringify({
        operationName: 'ProductPriceById',
        query: PRODUCT_PRICE_QUERY,
        variables: {
          id,
        }
      })
    })
      .then((resp) => resp.json())
      .then(({ data, errors }) => {

        const price = data?.product?.price?.price;
        const currency = data?.product?.price?.currency;
        const formattedPrice = price && currency
          ? new Intl.NumberFormat(window.navigator.language, {
              style: 'currency',
              currency: data?.product?.price?.currency
            }).format(price)
          : undefined;
        if(formattedPrice) {
          priceElement.innerHTML = formattedPrice;
        }
        const buyNowButton = document.querySelector(`[data-remark-id="purchase-button"][remark-product-id="${id}"]`)
        if (data?.product?.externalUrl && buyNowButton) {
          buyNowButton.onclick = function () {
            if (window) window.open(data.product.externalUrl, "_blank", "noopener");
          }
        }
        return data;
        
      });
  });
};
const retryEnhanceSeoPage = async () => {
  const wait = ms => new Promise((r) => setTimeout(r, ms));
  const MAX_ATTEMPTS = 3;
  for (let attempts = 0; attempts < MAX_ATTEMPTS; attempts++) {
    if (document.querySelector(`[data-remark-id="chat-activator"]`)) {
      enhanceSEOPage();
      break;
    }
    await wait(3000);
  }
}
retryEnhanceSeoPage();
})();
(function() {
  function applyShadowDOM() {
    const root = document.querySelector('.remark-content');
    if (root && !root.shadowRoot) {
      const shadowRoot = root.attachShadow({ mode: 'open' });
      const style = document.createElement('style');
      style.textContent = root.querySelector('style').textContent;
      shadowRoot.appendChild(style);
      
      const content = root.querySelector('#remark-content-root');
      shadowRoot.appendChild(content);
      
      root.querySelector('style').remove();
    }
  }
  function setupShareButtons() {
    const shareButtons = {
      'linkedin': document.querySelector('#remark-linkedin-share'),
      'facebook': document.querySelector('#remark-facebook-share'),
      'twitter': document.querySelector('#remark-twitter-share')
    };

    const currentUrl = encodeURIComponent(window.location.href);
    const title = encodeURIComponent(document.title);

    for (const [platform, button] of Object.entries(shareButtons)) {
      if (button) {
        button.addEventListener('click', (e) => {
          e.preventDefault();
          let shareUrl;

          switch (platform) {
            case 'linkedin':
              shareUrl = `https://www.linkedin.com/sharing/share-offsite/?url=${currentUrl}`;
              break;
            case 'facebook':
              shareUrl = `https://www.facebook.com/sharer/sharer.php?u=${currentUrl}`;
              break;
            case 'twitter':
              shareUrl = `https://twitter.com/intent/tweet?url=${currentUrl}&text=${title}`;
              break;
          }

          window.open(shareUrl, '_blank', 'width=600,height=400');
        });
      }
    }
  }

  function setupTableOfContents() {
    const tocItems = document.querySelectorAll('[id^="toc-"]');
    const root = document.querySelector('.remark-content');
    const shadowRoot = root.shadowRoot;
    
    if (!shadowRoot) {
      console.error('Shadow root not found');
      return;
    }

    const headings = shadowRoot.querySelectorAll('h2, h3');

    let lastActiveItem = null;

    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          const id = entry.target.id;
          const tocItem = document.getElementById(`toc-${id}`);
          if (tocItem) {
            if (entry.isIntersecting) {
              if (lastActiveItem) {
                lastActiveItem.removeAttribute('data-active');
              }
              tocItem.setAttribute('data-active', 'true');
              lastActiveItem = tocItem;
            }
          }
        });
      },
      { 
        root: shadowRoot,
        rootMargin: '-20% 0px -80% 0px' 
      }
    );

    headings.forEach((heading) => {
      observer.observe(heading);
    });
  }

  function setUpBlogPosts() {
    setupShareButtons();
    applyShadowDOM();
    setupTableOfContents();

  }
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', setUpBlogPosts);
  } else {
    setUpBlogPosts();
  }
})();

